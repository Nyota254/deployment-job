version: 2.1

# commands:
#   destroy_environment:
#     steps:
#       - run:
#           name: Destroy environment
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

jobs:

####################################################################
# Infrastructure creation job
####################################################################

  # create_infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
    
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file infra-launcher.yml \
  #             --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #             --region us-east-1

####################################################################
#Infrastructure creation job ending
####################################################################

#####################################################################
#Smoke Test Job
#####################################################################

  # smoke_test:
  #   docker:
  #     - image: amazon/aws-cli
    
  #   steps:
  #     - checkout
  #     # - run: apk update && apk add curl curl-dev bash
  #     - run:
  #         name: Check connectivity of https://blog.udacity.com/ site
  #         command: |
  #           URL="https://blog.udacity777.com/"

  #           if curl -s --head ${URL} 
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy_environment

###########################################################################
#Smoke test end
##########################################################################

#########################################################################
#Create and Deploy Front end
########################################################################

  create_and_deploy_frontend:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: creates new bucket and copys files into the bucket
          command: |
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name create-bucket-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides MyBucketName="my-${CIRCLE_WORKFLOW_ID:0:5}-bucket" \
              --tags project=udapeople
      - run: aws s3 sync . s3://my-${CIRCLE_WORKFLOW_ID:0:5}-bucket --delete

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="my-${CIRCLE_WORKFLOW_ID:0:5}-bucket"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive



workflows:
  # create-infrastructure-workflow:
  #   jobs:
  #     - create_infrastructure

  my-workflow:
    jobs:
      - create_and_deploy_frontend
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
      # - create_infrastructure
      # - smoke_test:
      #     requires:
      #       - create_infrastructure
